
.ir { display: block; border: 0; text-indent: -999em; overflow: hidden; background-color: transparent; background-repeat: no-repeat; text-align: left; direction: ltr; *line-height: 0; }
.ir br { display: none; }

.hidden { display: none !important; visibility: hidden; }

.visuallyhidden { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; }

.visuallyhidden.focusable:active, .visuallyhidden.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }

.invisible { visibility: hidden; }

.clearfix:before, .clearfix:after { content: ""; display: table; }
.clearfix:after { clear: both; }
.clearfix { *zoom: 1; }


/* ---===|| Curse Blocks Helper Mixins ||===--- */


// Support Triggers

$progressive-mozilla          : true  !default; // -moz
$progressive-webkit           : true  !default; // -webkit
$progressive-webkit-gradients : true  !default;
$progressive-opera            : true  !default; // -o
$progressive-microsoft        : true  !default; //-ms
$progressive-khtml            : false !default; // -khtml
$progressive-svg              : false !default;
$progressive-pie              : false !default;

// Progressive Blanket

@mixin progressive($property, $value,
$webkit   : $progressive-webkit,
$khtml    : $progressive-khtml,
$moz      : $progressive-mozilla,
$ms       : $progressive-microsoft,
$o        : $progressive-opera,
$official : true
) {
  @if $webkit   and $progressive-webkit     { -webkit-#{$property} : $value; }
  @if $khtml    and $progressive-khtml      {  -khtml-#{$property} : $value; }
  @if $moz      and $progressive-mozilla    {    -moz-#{$property} : $value; }
  @if $ms       and $progressive-microsoft  {     -ms-#{$property} : $value; }
  @if $o        and $progressive-opera      {      -o-#{$property} : $value; }
  @if $official                             {         #{$property} : $value; }
}

@mixin progressive-value($property, $value,
$webkit   : $progressive-webkit,
$khtml    : $progressive-khtml,
$moz      : $progressive-mozilla,
$ms       : $progressive-microsoft,
$o        : $progressive-opera,
$official : true
) {
  @if $webkit   and $progressive-webkit     { #{$property} : -webkit-#{$value}; }
  @if $khtml    and $progressive-khtml      { #{$property} :  -khtml-#{$value}; }
  @if $moz      and $progressive-mozilla    { #{$property} :    -moz-#{$value}; }
  @if $ms       and $progressive-microsoft  { #{$property} :     -ms-#{$value}; }
  @if $o        and $progressive-opera      { #{$property} :      -o-#{$value}; }
  @if $official                             { #{$property} :         #{$value}; }
}

// Background Gradient

@mixin backgroundGradient($gradient) {
  @if ($gradient) {
    @include progressive-value(background-image, $gradient);
  }
  @else {
  // Do not generate CSS
  }
}

// Border Radius (Needs to be extended with custom Ruby functions to better support standard formatting)

@mixin borderRadius($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-radius, $radius);
  }
}

@mixin borderRadius-top($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-top-right-radius, $radius);
    @include progressive(border-top-left-radius, $radius);
  }
}

@mixin borderRadius-right($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-top-right-radius, $radius);
    @include progressive(border-bottom-right-radius, $radius);
  }
}

@mixin borderRadius-top-right($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-top-right-radius, $radius);
  }
}

@mixin borderRadius-bottom($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-bottom-right-radius, $radius);
    @include progressive(border-bottom-left-radius, $radius);
  }
}

@mixin borderRadius-bottom-left($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-bottom-left-radius, $radius);
  }
}

@mixin borderRadius-bottom-right($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-bottom-right-radius, $radius);
  }
}

@mixin borderRadius-left($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-top-left-radius, $radius);
    @include progressive(border-bottom-left-radius, $radius);
  }
}

@mixin borderRadius-top-left($radius) {
  @if ($radius == null) {
  // Do not generate CSS
  }
  @else {
    @include progressive(border-top-left-radius, $radius);
  }
}

@mixin boxShadow(
$shadow,
$shadow-2: false,
$shadow-3: false,
$shadow-4: false,
$shadow-5: false,
$shadow-6: false
) {
  @if ($shadow == null) {
  // Generate no CSS
  }
  @else if ($shadow-6) {
    @include progressive(box-shadow, $shadow unquote(",") $shadow-2 unquote(",") $shadow-3 unquote(",") $shadow-4 unquote(",") $shadow-5 unquote(",") $shadow-6);
  }
  @else if ($shadow-5) {
    @include progressive(box-shadow, $shadow unquote(",") $shadow-2 unquote(",") $shadow-3 unquote(",") $shadow-4 unquote(",") $shadow-5);
  }
  @else if ($shadow-4) {
    @include progressive(box-shadow, $shadow unquote(",") $shadow-2 unquote(",") $shadow-3 unquote(",") $shadow-4);
  }
  @else if ($shadow-3) {
    @include progressive(box-shadow, $shadow unquote(",") $shadow-2 unquote(",") $shadow-3);
  }
  @else if ($shadow-2) {
    @include progressive(box-shadow, $shadow unquote(",") $shadow-2);
  }
  @else {
    @include progressive(box-shadow, $shadow);
  }
}


@mixin transition ($type, $time, $ease) {
  @include progressive(transition, $type $time $ease);
}
@mixin group {
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
  .ie7 &,
  .ie8 & { zoom: 1; }
}

@mixin clearfix {
  *display: inline-block;
  &:after {
    content: " ";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
}

@mixin replace-text($img, $x: 50%, $y: 50%) {
  text-indent: -9999em;
  overflow: hidden;
  background-image: url(unquote($img));
  background-repeat: no-repeat;
  background-position: $x $y;
}


@mixin opacity($opacity) {
  @include progressive(opacity, $opacity);
}

@mixin rgba-background($color, $opacity) {
  background: $color;
  background: rgba($color, $opacity);
  -pie-background: rgba($color, $opacity);
  // @include PIE
  // behavior: url(/assets/PIE.htc)
}


@mixin sticky-footer($footer-height, $root-selector: unquote("#root"), $root-footer-selector: unquote("#root_footer"), $footer-selector: unquote("#footer")) {
  html, body { height: 100%; }

  #{$root-selector} {
    clear: both;
    min-height: 100%;
    height: auto !important;
    height: 100%;
    margin-bottom: -$footer-height;

    #{$root-footer-selector} { height: $footer-height; }
  }

  #{$footer-selector} {
    clear: both;
    position: relative;
    height: $footer-height;
  }
}


@mixin vg-fixed-footer($footer-height, $additional-padding, $footer: unquote("#footer"), $root: unquote("#root")) {
  #{$footer} {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    z-index: 50;
  }

  #{$root} {
    height: 100%;
    overflow: auto;
    padding-bottom: $footer-height + $additional-padding;
    // z-index: 10
  }
}



@mixin font-face($family, $filename) {
// $prefix: "/assets/" + $family + "/" + $filename
  $prefix: "/fonts/" + $family + "/" + $filename;
  // IE hack
  @font-face {
    font-family: $family;
    src: url($prefix + ".eot?") format("embedded-opentype");
  }

  // Everybody else
  @font-face {
    font-family: $family;
    src: local("â˜º"), url($prefix + ".woff") format("woff"), url($prefix + ".ttf") format("opentype"), url($prefix + ".eot"), url($prefix + ".svg#" + $filename + "'") format("svg");
  }

}


@mixin shadow($color: #333333, $hoff: 0, $voff: 0, $blur: 5px, $spread: 10px) {
  -moz-box-shadow: $hoff $voff $blur $spread $color;
  -webkit-box-shadow: $hoff $voff $blur $spread $color;
  box-shadow: $hoff $voff $blur $spread $color;
  behavior: url(/assets/PIE.htc);
}


// Preloader/Progress bar
@-webkit-keyframes rotate {
  from { -webkit-transform: rotate(0deg); }
  to { -webkit-transform: rotate(360deg); }
}


@mixin rotate($duration: 2s) {
  -webkit-animation-name: rotate;
  -webkit-animation-duration: $duration;
  -webkit-animation-iteration-count: infinite;
  -webkit-animation-timing-function: linear;
}


// Make an element a flexbox
@mixin display-flex {
  display: -webkit-flex;
  display: flex;
}


// Flex direction: row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  flex-direction: $direction;
}

// How much space the box should take
@mixin flex-ratio($ratio) {
  -webkit-flex: $ratio;
  flex: $ratio;
}

